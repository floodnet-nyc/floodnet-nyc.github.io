{"0": {
    "doc": "About FloodNet",
    "title": "About",
    "content": "FloodNet is a cooperative of communities, researchers, and New York City government agencies working to better understand the frequency, severity, and impacts of flooding in New York City. The data and knowledge gained can be used by local residents, researchers, city agencies, and others to advocate around and work to reduce flood risk. FloodNet brings together innovative sources of information on street flooding impacts in neighborhoods that are vulnerable to high tides, storm surge, and stormwater runoff. ",
    "url": "/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "About FloodNet",
    "title": "Motivation",
    "content": "Of the myriad impacts that are predicted to accompany climate change, flooding is expected to have an out-sized influence on public health, infrastructure, and mobility in urban areas. In New York City, for example, sea level rise and an increase in the occurrence of high intensity rain storms (which convey large volumes of water to drains, leading to backups and overflows) have led to a dramatic increase in flood risk, particularly in low-lying and coastal neighborhoods. The physical presence of standing water on streets and sidewalks can impede mobility and restrict access to transportation. Additionally, urban flood water contains a diverse array of contaminants, including industrial and household chemicals, fuels, and sewage. Access to real-time information on flooding can improve resiliency and efficiency by allowing residents to identify navigable transportation routes and make informed decisions to avoid exposure to floodwater contaminants. ",
    "url": "/about/",
    "relUrl": "/about/"
  },"2": {
    "doc": "About FloodNet",
    "title": "Objective",
    "content": "The objective of the FloodNet project is to develop and deploy a platform to provide real-time, street-level flood information - including the presence, frequency, and severity of local surface flood events - to a range of stakeholders, including policy makers, government agencies, citizens, emergency response teams, community advocacy groups, and researchers. This platform includes a physical sensor network, its connectivity, as well as data storage, and sharing infrastructure. ",
    "url": "/about/",
    "relUrl": "/about/"
  },"3": {
    "doc": "About FloodNet",
    "title": "About FloodNet",
    "content": " ",
    "url": "/about/",
    "relUrl": "/about/"
  },"4": {
    "doc": "Home",
    "title": " Contributing ",
    "content": "Did you have a question? Did you find a bug? Or did you simply wanted to say hello?! You can reach out to the author of the repo via email about any questions. When contributing to this documentation raise an issue to start a discussion in the GiHub repo. See you there! ",
    "url": "/",
    "relUrl": "/"
  },"5": {
    "doc": "Home",
    "title": "License",
    "content": "This documentation is distributed using MIT License. ",
    "url": "/",
    "relUrl": "/"
  },"6": {
    "doc": "Home",
    "title": "Home",
    "content": "# FloodNet Documentation This documentation website is built for FloodNet, a cooperative of communities, researchers, and New York City government agencies. This is an evolving website which contains all the documents related to Quality Assurance Plans, Sensor Assembly process, Quality Control and additional references. ",
    "url": "/",
    "relUrl": "/"
  },"7": {
    "doc": "Quality Assurance Procedure",
    "title": "Quality Assurance Procedure",
    "content": "# Quality Assurance Procedure (QAP) This document details the Quality Assurance Procedure (QAP) at FloodNet. This document details every stage of the build/assembly procedure to ensure a good sensor build quality. **:** * [General](#general) + [Purpose](#purpose) * [Quality Assurance Procedure](#quality-assurance-process) + [Stage 1 - PCB Assembly](#stage-1---pcb-assembly) + [Stage 2 - MCU Assembly](#stage-2---mcu-assembly) + [Stage 3 - Battery Assembly](#stage-3---battery-assembly) + [Evaluation 1 - Main voltage check](#evaluation-1---main-voltage-check) + [Stage 4 - Housing Preperation](#stage-4---housing-preperation) + [Stage 5 - Ultrasonic Sensor Assembly](#stage-5---ultrasonic-sensor-assembly) + [Stage 6 - PCB Mounting](#stage-6---pcb-mounting) + [Stage 7 - Solar Panel Assembly](#stage-7---solar-panel-assembly) + [Evaluation 2 - Solar Panel Operation](#evaluation-2---solar-panel-operation) + [Stage 8 - Antenna Assembly](#stage-8---antenna-assembly) + [Evaluation 3 - Sensor Operation](#evaluation-3---sensor-operation) + [Final steps](#final-steps) * [References](#references) ## General ### Purpose The main objective of this document is to establish and execute Quality Assurance Procedure (QAP) to produce high quality sensor builds with consistency. ## Quality Assurance Procedure The QAP shall be followed by all the personnel responsible for performing and verifying work affecting sensor quality. ### Stage 1 - Housing Preparation Instructions on using the step drill are [here](https://cdn.shopify.com/s/files/1/0012/0350/3168/files/4210T.Manual.20190108.pdf?3927471806556549811) 1. Secure the housing lid using a vice and drill a hole of diameter 1 1/4\". The hole in the lid shall be able accommodate the Ultrasonic sensor. 2. Similarly using a step drill and a vice, on the sides with no mounting support, drill a hole of diameter 1/2\" on one side and 1/4\" on the other side. ### Stage 2 - PCB Assembly 1. Gather a multimeter and check the PCB for any manufacturing defects. Choose the continuity setting on the multimeter indicated by a small microphone symbol. To perform the PCB fault check, place one probe on the beginning of the trace and the other on the ending and check for connectivity as shown in the figure below. Repeat this process for every trace. The both ends of a trace shall have connectivity. Across different traces, continuity shall not be observed unless they share the common pin like GND or V+. 2. While placing the PCB upside down, Solder a 2-pin JST connector into the Battery IN facing towards the center of the board. 3. Now with PCB in the same position, solder the three legs of the slide switch into the ON OFF pins like shown below (There are a total of 5 legs on this components and the legs on the either ends need not to be soldered, i.e. the middle three are the ones that need soldering). The switch does not have polarity but just on and off depending on where the slider lies. 4. Turn the PCB around and make sure the switch is ***turned off***. 5. Now with the PCB placed upside down, solder screw terminals for Ultrasonic Sensor and Solar input like shown below. Note: All the holes of the screw terminal shall be facing the text on the PCB like shown in above figures. 6. Now Solder battery out screw terminals into **BAT OUT** like below. 7. Using a multimeter check for shorts and connectivity. Further quality of the soldering shall be checked at this step and [identify and resolve any soldering errors](https://learn.adafruit.com/adafruit-guide-excellent-soldering?view=all#common-problems). ### Stage 3 - MCU Assembly 1. Now cut the MCU male headers to match the 8-pin female headers as shown in the below figure. 2. Insert these male headers into female headers and place the MCU's first eight pins, both sides on top of these male headers. Solder header pins while the MCU is securely held by the female header pins, as shown in the figure below. 3. With the PCB upside down solder the female header pins into the PCB like shown below. Make sure PCB is facing the right direction and inserted into the correct pins. 4. Using a multimeter check for the connectivity between the MCU pins and the screw terminals. ### Stage 4 - Battery Assembly 1. With the switch turned ***off***, remove the MCU from the female header pins and insert a ***fully charged*** 400 mAh battery into the **BAT IN**. 2. Prepare a 2 Pin JST connector by tanning the other ends. Insert the connecter on the back side of MCU as shown below. 3. Connect the JST connector with **BAT OUT** into their corresponding **VB** and **G**, respectively, as shown below. 4. Mount the MCU back onto the headers and make sure the battery is not under any pressure or being crushed by the MCU. When done correctly battery should be only held by the JST connector and sits comfortably under the MCU. ### Evaluation 1 - Main voltage check 1. Turn on the switch and check the voltage at BAT OUT. The multimeter reading should be **VBat** - the battery's voltage level, across **VB** and **GND** when the s/w is on. 2. ***Turn off*** the switch before proceeding to next steps when the evaluation has been successfully completed. ### Stage 5 - Ultrasonic Sensor Assembly 1. Tan both ends of 4 different colored wires and solder one end of the wires onto the Ultrasonic sensor's pins - GND, V+, 5 and 4. 2. Carefully, without applying too much pressure on the solder joints, twist them like shown. 3. Check for connectivity and any [common soldering errors](https://learn.adafruit.com/adafruit-guide-excellent-soldering?view=all#common-problems). 4. Stack 2 washers that come with the lock nut like shown below. 5. Insert US into the housing lid secure it using a lock nut on the inside of the housing lid. 6. Connect V+ of ultrasonic sensor to the VE of PCB. Connect GND of ultrasonic sensor to the G of PCB. Connect pin 4 of ultrasonic sensor to the G5 of PCB. Connect pin 5 of ultrasonic sensor to the RX of PCB. ### Stage 6 - PCB Mounting 1. Lift the MCU and screw the PCB onto the mounting headers on the base of the housing. The orientation shall match the housing holes: 1/2\" hole shall be facing the solar input. 2. Insert the MCU back into the header pins ### Stage 7 - Solar Panel Assembly 1. Use a {fill-me-in} wire and cut it to a length of {fill-me-in} like shown in the figure 25. 2. Prepare the ends by tinning them like shown in the figure 26. 3. Place the nut of the PG-7 cable gland inside the housing and insert this prepared end of the wire into the hosuing through a PG-7 cable gland like shown in the figure 27. 4. Screw in the ends into the Solar screw terminals into the respective pins like shown in figure 28. 5. Stick one side of the gasket onto the 3d mount and run the other end of the solar cable through the 3d mount like shown in figure 29. Leave enough space for soldering the solar panel. 6. Now, prepare the ends by stripping the wires and tinning them and solder the ends onto the Solar board like shown in figure 30. 7. Screw the open ends of the solar cable into the screw terminal SOLAR through the cable gland and check connectivity between the solar panel and screw terminals like shown in figure 31. ### Evaluation 2 - Solar Panel Operation 1. Check for connectivity between both the ends of the solar cable. Also check for shorts between the VS and GND {figure 32} 2. Flash light onto the solar panel and check voltages on the screw terminals using a multimeter like shown below. When a phone falshlight is flashed upon the panel, it should read atleast 3 Volts. {figure 33} 2. Now with the light is being flashed onto the panel, verify the VS is the positive terminal. If not, the solar panel has been soldered in reverse and shall be re-soldered so that a positive voltage is seen on the VS. {figure 34} ### Stage 8 - Antenna Assembly 1. Stack a star washer and lock washer and insert the end of the antenna with threading into the housing from the inside like shown in the figure 35 2. Secure it using a screw from the outside like shown in figure 36 3. Insert the ulf connector of the antenna onto the MCU like shown in figure 37. 4. Screw in the LoRa Antenna from the outside like shown in the figure 38. The antenna should feel tight after screwing onto the threading. If not, try washers of different size. ### Evaluation 3 - Sensor Operation 1. Flash the test firmware and check the battery voltage and ultrasonic measurements on TTN console. The battery voltage shall be between 3.7 Volts and 4.2 Volts. Since we would be using a fully charged battery, it should read voltage greater than 4 Volts. The distance reading on the TTN console shall be greater than or equal to 300 and less than or equal to the maximum range of the sensor model. The 5-meter model range is 300mm to 5000mm and the 10-meter model range is 300mm to 10000mm. {figure 39} ### Final steps 1. Close the lid and make sure the ultrasonic sensor wires goes to the {} to avoid the wires being in the way. {figure 40} 2. Now secure the lid with screws {figure 41} 3. The sensor shall feel robust and when invereted there shall be no moving parts. 4. Inspect the sensor mechanical quality of the following: holes, mounts, securing enclosure, waterproofing. {figure 42} 5. Remove the tape on the gasket and install the solar panel onto the 3D mount {figure 43} ## References 1. [*ER Quality Program Plan*, ES/*ER*/TM-4/R4. (*MMES 1994a*)](https://rais.ornl.gov/documents/tm117.pdf) 2. [The Spruce, Wire connection problems and solutions](https://www.thespruce.com/wire-connection-problems-and-solutions-1152877) 3. [Adafruit's Tutorial on Good Soldering Practices](https://learn.adafruit.com/adafruit-guide-excellent-soldering?view=all) 4. [How to Solder: Through-hole Soldering](https://learn.sparkfun.com/tutorials/how-to-solder-through-hole-soldering/all) ",
    "url": "/quality-management/quality-assurance-procedure/",
    "relUrl": "/quality-management/quality-assurance-procedure/"
  },"8": {
    "doc": "Quality Control",
    "title": "Quality Control",
    "content": "# Quality Control After the production/assembly stage, quality control (QC) tests are performed on every sensor to validate the data quality. QAP is a quality management procedure followed during the sensor build/assembly process, whereas QC procedures are performed after the complete build procedure and before the deployment. **Table of Contents:** * [1.0 General](#10-general) + [1.1 Purpose](#11-purpose) * [2.0 Quality Control](#20-quality-control) + [2.1 Sensor Calibration and Data Validation Testing](#21-sensor-calibration-and-data-validation-testing) - [Objective](#objective) - [Procedure](#procedure) - [Calibration](#calibration) - [Records](#records) + [2.2 Noise floor Testing](#22-noise-floor-testing) - [Objective](#objective-1) - [Procedure](#procedure-1) - [Records](#records-1) * [References](#references) ## 1.0 General ### 1.1 Purpose The purpose of this document is to provide Quality Control (QC) guidelines for 1. Sensor Calibration and Data Validation Testing 2. Noise Floor Testing ## 2.0 Quality Control ### 2.1 Sensor Calibration and Data Validation Testing #### Objective To perform initial calibration and validation of the sensor depth calculations at different heights in laboratory conditions. #### Procedure 1. Using measuring tape, fix mount locations at heights h1, h2, and h3 from the surface. If three different mounts aren't available, vary the single mounting location's height accordingly. While fixing the mount, using a spirit leveler, make sure the mount is vertical to the mounting surface and horizontal to the ground plane. 2. Mount the sensor at these known heights in order starting from h1. Now collect data for at least 60 minutes, with a duty cycle of 60 seconds. 3. After the second step is complete, place an object of known height on the surface, beneath the sensor for the next 60 minutes and record the measurements. 4. Stop the sensor before removing the object and move the it onto the next height and repeat the process until the sensor has been tested and recorded at all the heights h1, h2, h3 so on. #### Calibration Calculate offset value for every heights by taking median of these measurements. Invert the distance values and add this calculated offset values to obtain depth values. #### Depth Data Validation Since measurement of depth is relative to another vertical elevation from a known reference point, the height of a known object is used to simulate validation of depth level captured by the sensor. At every given test height h1, h2, and h3, the average of the observed height of the object calculated from the depth values shall be Real Object's height +- noise floor. #### Records Calibration offsets and depth averages are recorded for every sensor along with the sensor unique identifiers shall be recorded on [this](https://docs.google.com/spreadsheets/d/1FdsjeI8EHIygVHqMOj_p9l_yOaDbCCXwaQY8SxioX9Q/edit?usp=sharing) google sheets for reference. ### 2.2 Noise floor Testing #### Objective The objective of this test is to perform noise floor testing of the ultrasonic sensor. #### Procedure Data collected from 2.1 is passed through a [python test script](https://github.com/floodsense/testing/blob/main/scripts/qc_test.py) to test the noise floor of the sensor. #### Records Noise floor for every sensor along with the sensor unique identifiers shall be recorded on [this](https://docs.google.com/spreadsheets/d/1FdsjeI8EHIygVHqMOj_p9l_yOaDbCCXwaQY8SxioX9Q/edit?usp=sharing) google sheets for reference. ## References 1. ",
    "url": "/quality-management/quality-control/",
    "relUrl": "/quality-management/quality-control/"
  },"9": {
    "doc": "Quality Management",
    "title": "Roles and Responsibilities",
    "content": "The following table outlines the roles and responsibilities for FloodNet personnel | FloodNet personnel | Roles | QA Responsibilities | --------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | Technical Lead | 1. QA/QC Manager/Advisor 2. Technical Lead | 1. Manages the project and oversees the big picture2. Uses strong technical skills to help the team solve technical issues | Sensor Engineer | 1. QA/QC Team Test Lead 2. QA/QC Validation Engineer | 1. Provides Leadership specifically to the test team to support the test teammates and oversee test processes 2. Participate in validation of the Quality Assurance Process (QAP)/Quality Control (QC) 3. Develop and maintain Manual/Automated test processes | Graduate Research Assistant | 1. QA/QC Manual/Automation Test Analyst 2. QA/QC Tester | 1. Develop, maintain and execute Manual/Automated test processes 2. Follow strict set of instructions to test or validate the product | ",
    "url": "/quality-management/",
    "relUrl": "/quality-management/"
  },"10": {
    "doc": "Quality Management",
    "title": "Quality Management",
    "content": "# Quality Management This folder contains the Quality Management at FloodNet including - Quality Assurance Procedure (QAP), Quality Control (QC), and Troubleshooting to implement, execute, and validate the sensor quality. {: .fs-6 .fw-300 } ![quality-management-process](/assets/images/quality-management-process.png) ",
    "url": "/quality-management/",
    "relUrl": "/quality-management/"
  },"11": {
    "doc": "Real-time Data Pipeline",
    "title": "Real-time Data Pipeline",
    "content": "# Real-time Data Pipeline - [1.0 General](#10-general) * [1.1 Background](#11-background) * [1.2 Purpose](#12-purpose) - [2.0 Considerations/Limitations](#20-considerations-limitations) - [2.1 Ground truth Validation of Real-time Flood Depth Data](#21-ground-truth-validation-of-real-time-flood-depth-data) - [2.2 Sensor Deployment Considerations](#22-sensor-deployment-considerations) + [2.2.1 Error in Pole Mount Angles](#221-error-in-pole-mount-angles) + [2.2.2 Location and Surface](#222-location-and-surface) + [2.2.3 Obstacles](#223-obstacles) - [2.3 Hardware Limitations](#23-hardware-limitations) + [2.3.1 Accuracy of Ultrasonic Sensor](#231-accuracy-of-ultrasonic-sensor) + [2.3.2 Noise Floor of Ultrasonic Sensor](#232-noise-floor-of-ultrasonic-sensor) + [2.3.3 Seasonal and Temperature Drift](#233-seasonal-and-temperature-drift) + [2.3.4 Influence on Ultrasonic Raw measurements by external factors](#234-influence-on-ultrasonic-raw-measurements-by-external-factors) - [3.0 Flood Depth Data Flow Pipeline](#30-flood-depth-data-flow-pipeline) * [3.1 Data Flow Pipeline Overview](#31-data-flow-pipeline-overview) * [3.2 Data Processing Methodology](#32-data-processing-methodology) + [Message Syntax Check](#message-syntax-check) + [Distance to Depth Conversion](#distance-to-depth-conversion) + [Erroneous Depth Data Filter](#erroneous-depth-data-filter) + [Data Storage - InfluxDB](#data-storage---influxdb) + [Offset Calculator](#offset-calculator) - [References](#references) # 1.0 General ## 1.1 Background This project uses advanced IoT flood sensors to measure Real-time Flood Depth Data (FDD) on a city-wide scale using [industrial grade ultrasonic](https://www.maxbotix.com/ultrasonic_sensors/mb7389.htm) ranging technology. The ultrasonic rangefinder readings are distance measurements and they are passed through a real-time data pipeline to calculate depth measurements. ## 1.2 Purpose The purpose of this document is to explain the Real-time Flood Depth Data pipeline and methodology. # 2.0 Considerations/Limitations This section details the important considerations and limitations of the Flood Depth Data quality. ## 2.1 Ground truth Validation of Real-time Flood Depth Data To validate the Real-time Flood Depth Data, the FloodNet researchers have conducted a validation experiment during the event of a flood on the July 23 at 8:30pm in Hamilton Beach. Depth calculation is performed manually by capturing the depth readings using a standard measuring scale that has been installed onto the same pole the sensor has been mounted. This manually collected data is compared to the depth data the sensor collected in real-time during the event of the flood. The following figure shows the comparison of manual depth captured vs Flood-Depth Data processed from the Data-pipeline. The results verify the validation of the Flood Depth Data captured by the Real-time Flood Monitoring System. ## 2.2 Sensor Deployment Considerations ### 2.2.1 Error in Pole Mount Angles Error in Light pole angles, street sign post angles ### 2.2.2 Location and Surface ### 2.2.3 Obstacles Weeds, dogs, humans, animals ## 2.3 Hardware Limitations ### 2.3.1 Accuracy of Ultrasonic Sensor ### 2.3.2 Noise Floor of Ultrasonic Sensor ### 2.3.3 Seasonal and Temperature Drift ### 2.3.4 Influence on Ultrasonic Raw measurements by external factors # 3.0 Flood Depth Data Flow Pipeline ## 3.1 Data Flow Pipeline Overview The following figure shows the overview of the Data Flow Pipeline: ![datapipeline-overview](/assets/images/data-pipeline-overview.png) The Flood Sensors transmit the raw data packets over LoRaWAN. These packets are forwarded to a The Things Network (TTN) application via LoRa Gateway. This data is further flows from the TTN into open-source tools hosted on NYU servers for further processing and storage. A combination of docker containers is running a load-balanced web server (NGINX), certificate authority (LetsEncrypt), data routing layer (NodeRed), a database (InfluxDB), and a dashboard platform (Grafana). The data processing stage takes place on the Node-RED flow, where the raw distance measurements are converted into Flood Depth Data (FDD). Raw as well as processed data is stored in the InfluxDB database. From there, Grafana handles all the visualization and alerting through its intuitive dashboarding platform. ## 3.2 Data Processing Methodology This section explains the data processing methodology implemented in the real-time data pipeline to calculate depth values from the raw data. The following picture demonstrates the flow which every data packet passes through: ![full-data-pipeline](/assets/images/full-data-pipeline.png) There are three main components where all these stages takes place: TTN Console, Node-Red and InfluxDB. The following sections explain these stages in detail. ### Message Syntax Check Payload decoder has been implemented on the TTN console to verify and decode the raw payload of incoming messages from end-nodes. ### Distance to Depth Conversion Raw measurements of the ultrasonic sensors are distances. Depth measurements are calculated with the application two transformations - Inversion followed by Offsetting. Inversion is multiplying the distance measurements with negative one. Offsetting is adding an offset value to the inverted measurements to obtain depth measurements. ### Raw distance measurements: The following figure shows raw distance values of the sensor on Carroll and 4th from 20th August midnight to 22nd August 12:00 pm. Two floods have been captured during the night of 22nd and they correspond to the two spikes in the figure. ![raw-distance](/assets/images/raw-distance-data.png) Distance readings are usually the distance between the street sidewalk and the sensor installation height within the noise floor. From the figure it can be observed that this baseline or the most common values when there is no flood is 2.82 meters. But during the time of the flood, the water level is the new surface the sensor detects and as the water level increases upwards, the distance between the sensor and this new surface decreases. Therefore the spikes are downwards. ### Inversion: As the water level increases during the flood, the distance readings between the sensor and this raising water level decreases. Thereby, inverting the measurements is more intuitive as the floods captured are now upwards and has the same profile as the actual flood. ![after-inversion](/assets/images/inverted-distance-data.png) However these are not depth measurements yet as they are at an offset. ### Offsetting: After inversion, an offset value is calculated and added to obtain depth values. This offset is calculated by using the median of the past 7 day's stable data. ![after-inversion-and-offsetting](/assets/images/offsetted-distance-data.png) Now the baseline when there is no flood is around 0 and the depths are above this baseline. ### Erroneous Depth Data Filter The flood depth data is further filtered to remove noise without losing the important flood-data characteristics such as timing, duration, depth, and the flood profile. Data filtering involves the following steps: 1. #### Gross Range Check: The range of the raw distance measurements are based on the sensor model and its range. For example, *30mm - 5000 mm* ranging sensor can only measure distances between these intervals. However, after installing the sensor at a known installation height, assuming the profile of the sidewalk's surface is constant, this range now becomes *30mm - installation height*. Hence any measurement outside this new range is discarded. 2. #### Spike Check: Spikes in the depth data can be caused by external agents such as animals, humans or any other object large enough to be detected by the sensor. The sensor takes the median of 5 measurements for every uplink to minimize these spikes. Furthermore, the spikes leads to a different profile compared to that of flood and are omitted. For example, the alerting system calculates the rate of change of successive depth measurements. This rate of change of depth measurements is slow and different for a flood compared to that of any other object because a gradual raise of the water surface corresponds to a gradual increase in the depth measurements. Where as an external object causes a very large rate of change and the alerting system does not flag these measurements as a flood. 3. #### Noise Check: Since the sensor working principle is based on the speed of the sound, the ultrasonic sensor measurements are influenced by the same factors - temperature, humidity, direct sunlight, wind etc that influence the speed of sound in air. This noise is around 1% of the measurement or 1 inch when installed at 2.5 meters. Due to solar radiation during the day, the temperature of the housing changes and the measured depth deviates from the actual depth by this noise floor. This deviation is caused by error in the temperature compensation. Therefore the depth measurements that lie within this noise floor are filtered out. ![filtered-depth-data](/assets/images/filtered-depth-data.png) ### Data Storage - InfluxDB Every data passed through this pipeline is finally stored in InfluxDB database with a timestamp at which the data is logged. ### Offset Calculator The raw distance data has anomalies during the daytime due to inaccurate temperature compensation of the sensor in direct sunlight. These anomalies are in the opposite direction of the depth measurements as shown in below figure ![raw-distance-7days](/assets/images/raw-distance-data-7days.png) When converted to depth, these anomalies appear below the surface which the sensor is looking at. Since the sensor is usually mounted above the sidewalk, the actual distance between the sensor and the sidewalk is constant. Also, during the night times, these anomalies are not observed and sensors data is most stable. Every night at 11:30 pm, the offset is estimated for every sensor by calculating the median of last 7 days night time data. The following figure shows the transformed depth values ![after-inversion-and-offsetting-7days](/assets/images/offsetted-distance-data-7days.png) The depth values cannot be negative and they are further filtered to get more stable data in a no-flood condition and the following figure shows such transformation. ![filtered-depth-data-7days](/assets/images/filtered-depth-data-7days.png) # References 1. [U.S. Integrated Ocean Observing System, 2021. Manual for Real-Time Quality Control of Water Level Data Version 2.1](https://doi.org/10.25923/vpsx-dc82) 2. [NWS Techniques Specification Package (TSP) 88-21-R2 (1994)](ftp://ftp.library.noaa.gov/noaa_documents.lib/NWS/NWS_TSP_88-21-R2.pdf) 3. [Maxbotix HRXl-MaxSonar -WR Datasheet](https://www.maxbotix.com/documents/HRXL-MaxSonar-WR_Datasheet.pdf) 4. [New York City Department of Transportation Traffic Signal Standard Drawings](https://www1.nyc.gov/html/dot/downloads/pdf/nyc-dot-traffic-signal-standard-drawings.pdf) 5. [New York State Standard Sheets](https://www.dot.ny.gov/main/business-center/engineering/specifications/busi-e-standards-usc/usc-repository/2017_9_stdsht_usc_book%204.pdf) 6. [LoRaWAN Class A Devices](https://lora-developers.semtech.com/uploads/documents/files/LoRaWAN_Class_A_Devices_In_Depth_Downloadable.pdf) ",
    "url": "/real-time-data-pipeline/",
    "relUrl": "/real-time-data-pipeline/"
  },"12": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "# Troubleshooting ",
    "url": "/quality-management/troubleshooting/",
    "relUrl": "/quality-management/troubleshooting/"
  }
}
